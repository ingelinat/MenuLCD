D G "__PCM__" 0 0 ""5.080""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""3-Jan-19""
D G "__TIME__" 0 0 ""13:16:36""
D G "_UNICODE" 0 0 ""?""
D G "__EVAL" 0 0 ""?""
D G "__16F876" 0 0 "1" "Menú para controlar LEDs"
c L "set_tris_a" 1 1 6 "FUNCTION"
f N "set_tris_a" 1 37 ""
v L "value" 1 37 "int8" `54 
f B "set_tris_a" 1 37 "void(int8 value)" `53 
f N "set_tris_b" 1 38 ""
v L "value" 1 38 "int8" `56 
f B "set_tris_b" 1 38 "void(int8 value)" `55 
f N "set_tris_c" 1 39 ""
v L "value" 1 39 "int8" `58 
f B "set_tris_c" 1 39 "void(int8 value)" `57 
f N "get_tris_a" 1 40 ""
f B "get_tris_a" 1 40 "int8()" `59 
f N "get_tris_b" 1 41 ""
f B "get_tris_b" 1 41 "int8()" `60 
f N "get_tris_c" 1 42 ""
f B "get_tris_c" 1 42 "int8()" `61 
f N "output_a" 1 43 ""
v L "value" 1 43 "int8" `63 
f B "output_a" 1 43 "void(int8 value)" `62 
f N "output_b" 1 44 ""
v L "value" 1 44 "int8" `65 
f B "output_b" 1 44 "void(int8 value)" `64 
f N "output_c" 1 45 ""
v L "value" 1 45 "int8" `67 
f B "output_c" 1 45 "void(int8 value)" `66 
f N "input_a" 1 46 ""
f B "input_a" 1 46 "int8()" `68 
f N "input_b" 1 47 ""
f B "input_b" 1 47 "int8()" `69 
f N "input_c" 1 48 ""
f B "input_c" 1 48 "int8()" `70 
f N "input_change_a" 1 49 ""
f B "input_change_a" 1 49 "int8()" `71 
f N "input_change_b" 1 50 ""
f B "input_change_b" 1 50 "int8()" `72 
f N "input_change_c" 1 51 ""
f B "input_change_c" 1 51 "int8()" `73 
f N "port_b_pullups" 1 52 ""
v L "value" 1 52 "int8" `75 
f B "port_b_pullups" 1 52 "void(int8 value)" `74 
f N "input" 1 53 ""
v L "pin" 1 53 "int16" `77 
f B "input" 1 53 "int8(int16 pin)" `76 
f N "input_state" 1 54 ""
v L "pin" 1 54 "int16" `79 
f B "input_state" 1 54 "int8(int16 pin)" `78 
f N "output_low" 1 55 ""
v L "pin" 1 55 "int16" `81 
f B "output_low" 1 55 "void(int16 pin)" `80 
f N "output_high" 1 56 ""
v L "pin" 1 56 "int16" `83 
f B "output_high" 1 56 "void(int16 pin)" `82 
f N "output_toggle" 1 57 ""
v L "pin" 1 57 "int16" `85 
f B "output_toggle" 1 57 "void(int16 pin)" `84 
f N "output_bit" 1 58 ""
v L "pin" 1 58 "int16" `87 
v L "level" 1 58 "int8" `88 
f B "output_bit" 1 58 "void(int16 pin,int8 level)" `86 
f N "output_float" 1 59 ""
v L "pin" 1 59 "int16" `90 
f B "output_float" 1 59 "void(int16 pin)" `89 
f N "output_drive" 1 60 ""
v L "pin" 1 60 "int16" `92 
f B "output_drive" 1 60 "void(int16 pin)" `91  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 64 "40"
d G "PIN_A1" 1 65 "41"
d G "PIN_A2" 1 66 "42"
d G "PIN_A3" 1 67 "43"
d G "PIN_A4" 1 68 "44"
d G "PIN_A5" 1 69 "45"
d G "PIN_B0" 1 71 "48"
d G "PIN_B1" 1 72 "49"
d G "PIN_B2" 1 73 "50"
d G "PIN_B3" 1 74 "51"
d G "PIN_B4" 1 75 "52"
d G "PIN_B5" 1 76 "53"
d G "PIN_B6" 1 77 "54"
d G "PIN_B7" 1 78 "55"
d G "PIN_C0" 1 80 "56"
d G "PIN_C1" 1 81 "57"
d G "PIN_C2" 1 82 "58"
d G "PIN_C3" 1 83 "59"
d G "PIN_C4" 1 84 "60"
d G "PIN_C5" 1 85 "61"
d G "PIN_C6" 1 86 "62"
d G "PIN_C7" 1 87 "63"
d G "FALSE" 1 90 "0"
d G "TRUE" 1 91 "1"
d G "BYTE" 1 93 "int8"
d G "BOOLEAN" 1 94 "int1"
d G "getc" 1 96 "getch"
d G "fgetc" 1 97 "getch"
d G "getchar" 1 98 "getch"
d G "putc" 1 99 "putchar"
d G "fputc" 1 100 "putchar"
d G "fgets" 1 101 "gets"
d G "fputs" 1 102 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f N "restart_cause" 1 107 ""
f B "restart_cause" 1 107 "int8()" `93 
f N "reset_cpu" 1 108 ""
f B "reset_cpu" 1 108 "void()" `94 
f N "sleep" 1 109 ""
f B "sleep" 1 109 "void()" `95  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 111 "3"
d G "WDT_TIMEOUT" 1 112 "11"
d G "MCLR_FROM_SLEEP" 1 113 "19"
d G "MCLR_FROM_RUN" 1 114 "27"
d G "NORMAL_POWER_UP" 1 115 "25"
d G "BROWNOUT_RESTART" 1 116 "26"
c L "sleep" 1 1 5 "FUNCTION"
f N "setup_timer_0" 1 123 ""
v L "mode" 1 123 "int8" `97 
f B "setup_timer_0" 1 123 "void(int8 mode)" `96 
f N "set_timer0" 1 124 ""
v L "value" 1 124 "int8" `99 
f B "set_timer0" 1 124 "void(int8 value)" `98 
f N "get_timer0" 1 125 ""
f B "get_timer0" 1 125 "int8()" `100 
f N "setup_counters" 1 126 ""
v L "mode" 1 126 "int8" `102 
v L "prescaler" 1 126 "int8" `103 
f B "setup_counters" 1 126 "void(int8 mode,int8 prescaler)" `101 
f N "set_rtcc" 1 127 ""
v L "value" 1 127 "int8" `105 
f B "set_rtcc" 1 127 "void(int8 value)" `104 
f N "get_rtcc" 1 128 ""
f B "get_rtcc" 1 128 "int8()" `106  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 130 "0"
d G "T0_EXT_L_TO_H" 1 131 "32"
d G "T0_EXT_H_TO_L" 1 132 "48"
d G "T0_DIV_1" 1 134 "8"
d G "T0_DIV_2" 1 135 "0"
d G "T0_DIV_4" 1 136 "1"
d G "T0_DIV_8" 1 137 "2"
d G "T0_DIV_16" 1 138 "3"
d G "T0_DIV_32" 1 139 "4"
d G "T0_DIV_64" 1 140 "5"
d G "T0_DIV_128" 1 141 "6"
d G "T0_DIV_256" 1 142 "7"
d G "T0_8_BIT" 1 145 "0"
d G "RTCC_INTERNAL" 1 149 "0"
d G "RTCC_EXT_L_TO_H" 1 150 "32"
d G "RTCC_EXT_H_TO_L" 1 151 "48"
d G "RTCC_DIV_1" 1 152 "8"
d G "RTCC_DIV_2" 1 153 "0"
d G "RTCC_DIV_4" 1 154 "1"
d G "RTCC_DIV_8" 1 155 "2"
d G "RTCC_DIV_16" 1 156 "3"
d G "RTCC_DIV_32" 1 157 "4"
d G "RTCC_DIV_64" 1 158 "5"
d G "RTCC_DIV_128" 1 159 "6"
d G "RTCC_DIV_256" 1 160 "7"
d G "RTCC_8_BIT" 1 161 "0"
c L "get_rtcc" 1 1 8 "FUNCTION"
f N "setup_wdt" 1 172 ""
v L "mode" 1 172 "int16" `108 
f B "setup_wdt" 1 172 "void(int16 mode)" `107 
f N "restart_wdt" 1 173 ""
f B "restart_wdt" 1 173 "void()" `109  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 176 "8"
d G "WDT_36MS" 1 177 "9"
d G "WDT_72MS" 1 178 "10"
d G "WDT_144MS" 1 179 "11"
d G "WDT_288MS" 1 180 "12"
d G "WDT_576MS" 1 181 "13"
d G "WDT_1152MS" 1 182 "14"
d G "WDT_2304MS" 1 183 "15"
c L "restart_wdt" 1 1 3 "FUNCTION"
f N "setup_timer_1" 1 189 ""
v L "mode" 1 189 "int16" `111 
f B "setup_timer_1" 1 189 "void(int16 mode)" `110 
f N "get_timer1" 1 190 ""
f B "get_timer1" 1 190 "int16()" `112 
f N "set_timer1" 1 191 ""
v L "value" 1 191 "int16" `114 
f B "set_timer1" 1 191 "void(int16 value)" `113  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 194 "0"
d G "T1_INTERNAL" 1 195 "0x85"
d G "T1_EXTERNAL" 1 196 "0x87"
d G "T1_EXTERNAL_SYNC" 1 197 "0x83"
d G "T1_CLK_OUT" 1 199 "8"
d G "T1_DIV_BY_1" 1 201 "0"
d G "T1_DIV_BY_2" 1 202 "0x10"
d G "T1_DIV_BY_4" 1 203 "0x20"
d G "T1_DIV_BY_8" 1 204 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
f N "setup_timer_2" 1 209 ""
v L "mode" 1 209 "int8" `116 
v L "period" 1 209 "int8" `117 
v L "postscale" 1 209 "int8" `118 
f B "setup_timer_2" 1 209 "void(int8 mode,int8 period,int8 postscale)" `115 
f N "get_timer2" 1 210 ""
f B "get_timer2" 1 210 "int8()" `119 
f N "set_timer2" 1 211 ""
v L "value" 1 211 "int8" `121 
f B "set_timer2" 1 211 "void(int8 value)" `120  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 213 "0"
d G "T2_DIV_BY_1" 1 214 "4"
d G "T2_DIV_BY_4" 1 215 "5"
d G "T2_DIV_BY_16" 1 216 "6"
c L "set_timer2" 1 1 4 "FUNCTION"
f N "setup_ccp1" 1 222 ""
v L "mode" 1 222 "int32" `123 
f B "setup_ccp1" 1 222 "void(int32 mode)" `122 
f N "setup_ccp1" 1 223 ""
v L "mode" 1 223 "int32" `125 
v L "pwm" 1 223 "int8" `126 
f B "setup_ccp1" 1 223 "void(int32 mode,int8 pwm)" `124 
f N "set_pwm1_duty" 1 224 ""
v L "value" 1 224 "int16" `128 
f B "set_pwm1_duty" 1 224 "void(int16 value)" `127  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 226 "0"
d G "CCP_CAPTURE_FE" 1 227 "0x04"
d G "CCP_CAPTURE_RE" 1 228 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 229 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 230 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 231 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 232 "0x09"
d G "CCP_COMPARE_INT" 1 233 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 1 234 "0x0B"
d G "CCP_PWM" 1 235 "0x0C"
d G "CCP_PWM_PLUS_1" 1 236 "0x1c"
d G "CCP_PWM_PLUS_2" 1 237 "0x2c"
d G "CCP_PWM_PLUS_3" 1 238 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
f N "setup_ccp2" 1 245 ""
v L "mode" 1 245 "int32" `133 
f B "setup_ccp2" 1 245 "void(int32 mode)" `132 
f N "setup_ccp2" 1 246 ""
v L "mode" 1 246 "int32" `135 
v L "pwm" 1 246 "int8" `136 
f B "setup_ccp2" 1 246 "void(int32 mode,int8 pwm)" `134 
f N "set_pwm2_duty" 1 247 ""
v L "value" 1 247 "int16" `138 
f B "set_pwm2_duty" 1 247 "void(int16 value)" `137 
c L "set_pwm2_duty" 1 1 3 "FUNCTION"
f N "setup_spi" 1 254 ""
v L "mode" 1 254 "int32" `143 
f B "setup_spi" 1 254 "void(int32 mode)" `142 
f N "spi_write" 1 255 ""
v L "value" 1 255 "int8" `145 
f B "spi_write" 1 255 "void(int8 value)" `144 
f N "spi_read" 1 256 ""
f B "spi_read" 1 256 "int8()" `146 
f N "spi_read" 1 257 ""
v L "value" 1 257 "int8" `148 
f B "spi_read" 1 257 "int8(int8 value)" `147 
f N "spi_data_is_in" 1 258 ""
f B "spi_data_is_in" 1 258 "int8()" `149  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 260 "0x00"
d G "SPI_MASTER" 1 261 "0x20"
d G "SPI_SLAVE" 1 262 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 263 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 264 "0x00"
d G "SPI_CLK_DIV_4" 1 265 "0x00"
d G "SPI_CLK_DIV_16" 1 266 "0x01"
d G "SPI_CLK_DIV_64" 1 267 "0x02"
d G "SPI_CLK_T2" 1 268 "0x03"
d G "SPI_SS_DISABLED" 1 269 "0x01"
d G "SPI_XMIT_L_TO_H" 1 271 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 272 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 274 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 275 "0x8000"
d G "SPI_L_TO_H" 1 278 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 279 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in" 1 1 2 "FUNCTION"
f N "setup_uart" 1 283 ""
v L "baud" 1 283 "int32" `151 
f B "setup_uart" 1 283 "void(int32 baud)" `150 
f N "setup_uart" 1 284 ""
v L "baud" 1 284 "int32" `153 
v L "stream" 1 284 "int8" `154 
f B "setup_uart" 1 284 "void(int32 baud,int8 stream)" `152 
f N "setup_uart" 1 285 ""
v L "baud" 1 285 "int32" `156 
v L "stream" 1 285 "int8" `157 
v L "clock" 1 285 "int32" `158 
f B "setup_uart" 1 285 "void(int32 baud,int8 stream,int32 clock)" `155 
f N "set_uart_speed" 1 286 ""
v L "baud" 1 286 "int32" `160 
f B "set_uart_speed" 1 286 "void(int32 baud)" `159 
f N "set_uart_speed" 1 287 ""
v L "baud" 1 287 "int32" `162 
v L "stream" 1 287 "int8" `163 
f B "set_uart_speed" 1 287 "void(int32 baud,int8 stream)" `161 
f N "set_uart_speed" 1 288 ""
v L "baud" 1 288 "int32" `165 
v L "stream" 1 288 "int8" `166 
v L "clock" 1 288 "int32" `167 
f B "set_uart_speed" 1 288 "void(int32 baud,int8 stream,int32 clock)" `164  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 292 "2"
d G "UART_DATA" 1 293 "4"
c L "set_uart_speed" 1 1 4 "FUNCTION"
f N "setup_adc" 1 300 ""
v L "mode" 1 300 "int16" `169 
f B "setup_adc" 1 300 "void(int16 mode)" `168 
f N "read_adc" 1 301 ""
f B "read_adc" 1 301 "int8()" `170 
f N "read_adc" 1 302 ""
v L "mode" 1 302 "int8" `172 
f B "read_adc" 1 302 "int8(int8 mode)" `171 
f N "read_adc" 1 303 ""
f G "read_adc" 1 303 "int16()" `173 
f N "read_adc" 1 304 ""
v L "mode" 1 304 "int8" `174 
f G "read_adc" 1 304 "int16(int8 mode)" `173 
f N "adc_done" 1 305 ""
f B "adc_done" 1 305 "int8(int8 mode)" `173  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 307 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 308 "0x100"
d G "ADC_CLOCK_DIV_8" 1 309 "0x40"
d G "ADC_CLOCK_DIV_32" 1 310 "0x80"
d G "ADC_CLOCK_INTERNAL" 1 311 "0xc0" "Internal 2-6us"
c L "adc_done" 1 1 1 "FUNCTION"
f N "setup_adc_ports" 1 314 ""
v L "setting" 1 314 "int8" `175 
f B "setup_adc_ports" 1 314 "void(int8 setting)" `174 
f N "set_analog_pins" 1 315 ""
v L "setting" 1 315 "int8" `177 
f B "set_analog_pins" 1 315 "void(int8 setting)" `176 
f N "set_adc_channel" 1 316 ""
v L "channel" 1 316 "int8" `179 
f B "set_adc_channel" 1 316 "void(int8 channel)" `178  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 1 318 "7" "None"
d G "ALL_ANALOG" 1 319 "0" "A0 A1 A2 A3 A4"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 1 320 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 1 321 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 1 322 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_VREF_VREF" 1 323 "0x08" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 1 324 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 1 325 "0x0E" "A0"
d G "AN0_VREF_VREF" 1 326 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 1 327 "0x1" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 1 328 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 1 329 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 1 330 "0x8" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 1 331 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 1 332 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 1 333 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 1 336 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 337 "1"
d G "ADC_READ_ONLY" 1 338 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
f N "abs" 1 344 ""
v L "x" 1 344 "sint8" `181 
f B "abs" 1 344 "sint8(sint8 x)" `180 
f N "abs" 1 345 ""
v L "x" 1 345 "sint16" `183 
f B "abs" 1 345 "sint16(sint16 x)" `182 
f N "abs" 1 346 ""
v L "x" 1 346 "sint32" `185 
f B "abs" 1 346 "sint32(sint32 x)" `184 
f N "abs" 1 347 ""
v L "x" 1 347 "float" `187 
f B "abs" 1 347 "float(float x)" `186 
f N "_mul" 1 348 ""
v L "??65535" 1 348 "int8" `189 
v L "??65535" 1 348 "int8" `190 
f B "_mul" 1 348 "int16(int8 ,int8 )" `188 
f N "_mul" 1 349 ""
v L "??65535" 1 349 "sint8" `192 
v L "??65535" 1 349 "sint8" `193 
f B "_mul" 1 349 "sint16(sint8 ,sint8 )" `191 
f N "_mul" 1 350 ""
v L "??65535" 1 350 "int16" `195 
v L "??65535" 1 350 "int16" `196 
f B "_mul" 1 350 "int32(int16 ,int16 )" `194 
f N "_mul" 1 351 ""
v L "??65535" 1 351 "sint16" `198 
v L "??65535" 1 351 "sint16" `199 
f B "_mul" 1 351 "sint32(sint16 ,sint16 )" `197  "Memory Manipulation Prototypes:"
f N "read_bank" 1 354 ""
v L "bank" 1 354 "int8" `201 
v L "offset" 1 354 "int8" `202 
f B "read_bank" 1 354 "int8(int8 bank,int8 offset)" `200 
f N "write_bank" 1 355 ""
v L "bank" 1 355 "int8" `204 
v L "offset" 1 355 "int8" `205 
v L "value" 1 355 "int8" `206 
f B "write_bank" 1 355 "void(int8 bank,int8 offset,int8 value)" `203 
f N "strcpy" 1 356 ""
v L "dest" 1 356 "*int8" `208 
v L "src" 1 356 "*int8" `209 
f B "strcpy" 1 356 "void(*int8 dest,*int8 src)" `207 
f N "memset" 1 357 ""
v L "destination" 1 357 "*int8" `211 
v L "value" 1 357 "int8" `212 
v L "num" 1 357 "int16" `213 
f B "memset" 1 357 "void(*int8 destination,int8 value,int16 num)" `210 
f N "memcpy" 1 358 ""
v L "destination" 1 358 "*int8" `215 
v L "source" 1 358 "*int8" `216 
v L "num" 1 358 "int16" `217 
f B "memcpy" 1 358 "void(*int8 destination,*int8 source,int16 num)" `214  "String Prototypes:"
f N "toupper" 1 361 ""
v L "cvalue" 1 361 "int8" `219 
f B "toupper" 1 361 "int8(int8 cvalue)" `218 
f N "tolower" 1 362 ""
v L "cvalue" 1 362 "int8" `221 
f B "tolower" 1 362 "int8(int8 cvalue)" `220 
f N "sprintf" 1 363 ""
v L "string" 1 363 "*int8" `223 
v L "cstring" 1 363 "*int8" `224 
f B "sprintf" 1 363 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `222  "Data Manipulators Prototypes:"
f N "shift_left" 1 366 ""
v L "address" 1 366 "*int8" `227 
v L "bytes" 1 366 "int8" `228 
v L "value" 1 366 "int8" `229 
f B "shift_left" 1 366 "int8(*int8 address,int8 bytes,int8 value)" `226 
f N "shift_right" 1 367 ""
v L "address" 1 367 "*int8" `231 
v L "bytes" 1 367 "int8" `232 
v L "value" 1 367 "int8" `233 
f B "shift_right" 1 367 "int8(*int8 address,int8 bytes,int8 value)" `230 
f N "rotate_left" 1 368 ""
v L "address" 1 368 "*int8" `235 
v L "bytes" 1 368 "int8" `236 
f B "rotate_left" 1 368 "void(*int8 address,int8 bytes)" `234 
f N "rotate_right" 1 369 ""
v L "address" 1 369 "*int8" `238 
v L "bytes" 1 369 "int8" `239 
f B "rotate_right" 1 369 "void(*int8 address,int8 bytes)" `237 
f N "swap" 1 370 ""
v L "value" 1 370 "int8" `241 
f B "swap" 1 370 "void(int8 value)" `240 
f N "make8" 1 371 ""
v L "var" 1 371 "int16" `243 
v L "offset" 1 371 "int8" `244 
f B "make8" 1 371 "int8(int16 var,int8 offset)" `242 
f N "make8" 1 372 ""
v L "var" 1 372 "int32" `246 
v L "offset" 1 372 "int8" `247 
f B "make8" 1 372 "int8(int32 var,int8 offset)" `245 
f N "make16" 1 373 ""
v L "varhigh" 1 373 "int8" `249 
v L "varlow" 1 373 "int8" `250 
f B "make16" 1 373 "int16(int8 varhigh,int8 varlow)" `248 
f N "make32" 1 374 ""
v L "var1" 1 374 "int16" `252 
f B "make32" 1 374 "int32(int16 var1)" `251 
f N "make32" 1 375 ""
v L "var1" 1 375 "int16" `254 
v L "var2" 1 375 "int16" `255 
f B "make32" 1 375 "int32(int16 var1,int16 var2)" `253 
f N "make32" 1 376 ""
v L "var1" 1 376 "int16" `257 
v L "var2" 1 376 "int8" `258 
f B "make32" 1 376 "int32(int16 var1,int8 var2)" `256 
f N "make32" 1 377 ""
v L "var1" 1 377 "int16" `260 
v L "var2" 1 377 "int8" `261 
v L "var3" 1 377 "int8" `262 
f B "make32" 1 377 "int32(int16 var1,int8 var2,int8 var3)" `259 
f N "make32" 1 378 ""
v L "var1" 1 378 "int8" `264 
f B "make32" 1 378 "int32(int8 var1)" `263 
f N "make32" 1 379 ""
v L "var1" 1 379 "int8" `266 
v L "var2" 1 379 "int8" `267 
f B "make32" 1 379 "int32(int8 var1,int8 var2)" `265 
f N "make32" 1 380 ""
v L "var1" 1 380 "int8" `269 
v L "var2" 1 380 "int8" `270 
v L "var3" 1 380 "int8" `271 
f B "make32" 1 380 "int32(int8 var1,int8 var2,int8 var3)" `268 
f N "make32" 1 381 ""
v L "var1" 1 381 "int8" `273 
v L "var2" 1 381 "int8" `274 
v L "var3" 1 381 "int8" `275 
v L "var4" 1 381 "int8" `276 
f B "make32" 1 381 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `272 
f N "make32" 1 382 ""
v L "var1" 1 382 "int8" `278 
v L "var2" 1 382 "int16" `279 
f B "make32" 1 382 "int32(int8 var1,int16 var2)" `277 
f N "make32" 1 383 ""
v L "var1" 1 383 "int8" `281 
v L "var2" 1 383 "int16" `282 
v L "var3" 1 383 "int8" `283 
f B "make32" 1 383 "int32(int8 var1,int16 var2,int8 var3)" `280 
f N "make32" 1 384 ""
v L "var1" 1 384 "int8" `285 
v L "var2" 1 384 "int8" `286 
v L "var3" 1 384 "int16" `287 
f B "make32" 1 384 "int32(int8 var1,int8 var2,int16 var3)" `284 
f N "bit_set" 1 385 ""
v L "var" 1 385 "int8" `289 
v L "bit" 1 385 "int8" `290 
f B "bit_set" 1 385 "void(int8 var,int8 bit)" `288 
f N "bit_set" 1 386 ""
v L "var" 1 386 "int16" `292 
v L "bit" 1 386 "int8" `293 
f B "bit_set" 1 386 "void(int16 var,int8 bit)" `291 
f N "bit_set" 1 387 ""
v L "var" 1 387 "int32" `295 
v L "bit" 1 387 "int8" `296 
f B "bit_set" 1 387 "void(int32 var,int8 bit)" `294 
f N "bit_clear" 1 388 ""
v L "var" 1 388 "int8" `298 
v L "bit" 1 388 "int8" `299 
f B "bit_clear" 1 388 "void(int8 var,int8 bit)" `297 
f N "bit_clear" 1 389 ""
v L "var" 1 389 "int16" `301 
v L "bit" 1 389 "int8" `302 
f B "bit_clear" 1 389 "void(int16 var,int8 bit)" `300 
f N "bit_clear" 1 390 ""
v L "var" 1 390 "int32" `304 
v L "bit" 1 390 "int8" `305 
f B "bit_clear" 1 390 "void(int32 var,int8 bit)" `303 
f N "bit_test" 1 391 ""
v L "var" 1 391 "int8" `307 
v L "bit" 1 391 "int8" `308 
f B "bit_test" 1 391 "int8(int8 var,int8 bit)" `306 
f N "bit_test" 1 392 ""
v L "var" 1 392 "int16" `310 
v L "bit" 1 392 "int8" `311 
f B "bit_test" 1 392 "int8(int16 var,int8 bit)" `309 
f N "bit_test" 1 393 ""
v L "var" 1 393 "int32" `313 
v L "bit" 1 393 "int8" `314 
f B "bit_test" 1 393 "int8(int32 var,int8 bit)" `312  "#use delay() Prototypes:"
f N "delay_cycles" 1 396 ""
v L "count" 1 396 "int8" `316 
f B "delay_cycles" 1 396 "void(int8 count)" `315 
f N "delay_ms" 1 397 ""
v L "time" 1 397 "int16" `318 
f B "delay_ms" 1 397 "void(int16 time)" `317 
f N "delay_us" 1 398 ""
v L "time" 1 398 "int16" `320 
f B "delay_us" 1 398 "void(int16 time)" `319  "#use rs232() Prototypes:"
f N "putchar" 1 401 ""
v L "cdata" 1 401 "int8" `322 
f B "putchar" 1 401 "void(int8 cdata)" `321 
f N "putchar" 1 402 ""
v L "cdata" 1 402 "int8" `324 
v L "stream" 1 402 "int8" `325 
f B "putchar" 1 402 "void(int8 cdata,int8 stream)" `323 
f N "puts" 1 403 ""
v L "string" 1 403 "*int8" `327 
f B "puts" 1 403 "void(*int8 string)" `326 
f N "puts" 1 404 ""
v L "string" 1 404 "*int8" `329 
v L "stream" 1 404 "int8" `330 
f B "puts" 1 404 "void(*int8 string,int8 stream)" `328 
f N "getch" 1 405 ""
f B "getch" 1 405 "int8()" `331 
f N "getch" 1 406 ""
v L "stream" 1 406 "int8" `333 
f B "getch" 1 406 "int8(int8 stream)" `332 
f N "gets" 1 407 ""
v L "string" 1 407 "*int8" `335 
f B "gets" 1 407 "void(*int8 string)" `334 
f N "gets" 1 408 ""
v L "string" 1 408 "*int8" `337 
v L "stream" 1 408 "int8" `338 
f B "gets" 1 408 "void(*int8 string,int8 stream)" `336 
f N "kbhit" 1 409 ""
f B "kbhit" 1 409 "int8()" `339 
f N "kbhit" 1 410 ""
v L "stream" 1 410 "int8" `341 
f B "kbhit" 1 410 "int8(int8 stream)" `340 
f N "printf" 1 411 ""
v L "string" 1 411 "*int8" `343 
f B "printf" 1 411 "void(*int8 string,*int8 _VA_LIST)" `342 
f N "fprintf" 1 412 ""
v L "stream" 1 412 "int8" `346 
v L "string" 1 412 "*int8" `347 
f B "fprintf" 1 412 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `345 
f N "putc_send" 1 413 ""
f B "putc_send" 1 413 "void()" `349 
f N "fputc_send" 1 414 ""
v L "stream" 1 414 "int8" `351 
f B "fputc_send" 1 414 "void(int8 stream)" `350 
f N "rcv_buffer_full" 1 415 ""
f B "rcv_buffer_full" 1 415 "int8()" `352 
f N "rcv_buffer_full" 1 416 ""
v L "stream" 1 416 "int8" `354 
f B "rcv_buffer_full" 1 416 "int8(int8 stream)" `353 
f N "rcv_buffer_bytes" 1 417 ""
f B "rcv_buffer_bytes" 1 417 "int16()" `355 
f N "rcv_buffer_bytes" 1 418 ""
v L "stream" 1 418 "int8" `357 
f B "rcv_buffer_bytes" 1 418 "int16(int8 stream)" `356 
f N "tx_buffer_full" 1 419 ""
f B "tx_buffer_full" 1 419 "int8()" `358 
f N "tx_buffer_full" 1 420 ""
v L "stream" 1 420 "int8" `360 
f B "tx_buffer_full" 1 420 "int8(int8 stream)" `359 
f N "tx_buffer_bytes" 1 421 ""
f B "tx_buffer_bytes" 1 421 "int16()" `361 
f N "tx_buffer_bytes" 1 422 ""
v L "stream" 1 422 "int8" `363 
f B "tx_buffer_bytes" 1 422 "int16(int8 stream)" `362  "#use i2c() Prototypes:"
f N "i2c_read" 1 425 ""
f B "i2c_read" 1 425 "int8()" `364 
f N "i2c_read" 1 426 ""
v L "ack" 1 426 "int8" `366 
f B "i2c_read" 1 426 "int8(int8 ack)" `365 
f N "i2c_read" 1 427 ""
v L "stream" 1 427 "int8" `368 
v L "ack" 1 427 "int8" `369 
f B "i2c_read" 1 427 "int8(int8 stream,int8 ack)" `367 
f N "i2c_write" 1 428 ""
v L "data" 1 428 "int8" `371 
f B "i2c_write" 1 428 "int8(int8 data)" `370 
f N "i2c_write" 1 429 ""
v L "stream" 1 429 "int8" `373 
v L "data" 1 429 "int8" `374 
f B "i2c_write" 1 429 "int8(int8 stream,int8 data)" `372 
f N "i2c_start" 1 430 ""
f B "i2c_start" 1 430 "void()" `375 
f N "i2c_start" 1 431 ""
v L "stream" 1 431 "int8" `377 
f B "i2c_start" 1 431 "void(int8 stream)" `376 
f N "i2c_start" 1 432 ""
v L "stream" 1 432 "int8" `379 
v L "restart" 1 432 "int8" `380 
f B "i2c_start" 1 432 "void(int8 stream,int8 restart)" `378 
f N "i2c_stop" 1 433 ""
f B "i2c_stop" 1 433 "void()" `381 
f N "i2c_stop" 1 434 ""
v L "stream" 1 434 "int8" `383 
f B "i2c_stop" 1 434 "void(int8 stream)" `382 
f N "i2c_isr_state" 1 435 ""
f B "i2c_isr_state" 1 435 "int8()" `384 
f N "i2c_slaveaddr" 1 436 ""
v L "addr" 1 436 "int8" `386 
f B "i2c_slaveaddr" 1 436 "void(int8 addr)" `385 
f N "i2c_slaveaddr" 1 437 ""
v L "stream" 1 437 "int8" `388 
v L "addr" 1 437 "int8" `389 
f B "i2c_slaveaddr" 1 437 "void(int8 stream,int8 addr)" `387 
f N "i2c_poll" 1 438 ""
f B "i2c_poll" 1 438 "int8()" `390 
f N "i2c_poll" 1 439 ""
v L "stream" 1 439 "int8" `392 
f B "i2c_poll" 1 439 "int8(int8 stream)" `391 
f N "i2c_init" 1 440 ""
v L "baud" 1 440 "int32" `394 
f B "i2c_init" 1 440 "void(int32 baud)" `393 
f N "i2c_init" 1 441 ""
v L "stream" 1 441 "int8" `396 
v L "baud" 1 441 "int32" `397 
f B "i2c_init" 1 441 "void(int8 stream,int32 baud)" `395 
f N "i2c_transfer" 1 442 ""
v L "address" 1 442 "int8" `399 
v L "wData" 1 442 "*int8" `400 
v L "wCount" 1 442 "int8" `401 
f B "i2c_transfer" 1 442 "void(int8 address,*int8 wData,int8 wCount)" `398 
f N "i2c_transfer" 1 443 ""
v L "address" 1 443 "int8" `403 
v L "wData" 1 443 "*int8" `404 
v L "wCount" 1 443 "int8" `405 
v L "rData" 1 443 "*int8" `406 
v L "rCount" 1 443 "*int8" `407 
f B "i2c_transfer" 1 443 "void(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `402 
f N "i2c_transfer" 1 444 ""
v L "stream" 1 444 "int8" `409 
v L "address" 1 444 "int8" `410 
v L "wData" 1 444 "*int8" `411 
v L "wCount" 1 444 "int8" `412 
f B "i2c_transfer" 1 444 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `408 
f N "i2c_transfer" 1 445 ""
v L "stream" 1 445 "int8" `414 
v L "address" 1 445 "int8" `415 
v L "wData" 1 445 "*int8" `416 
v L "wCount" 1 445 "int8" `417 
v L "rData" 1 445 "*int8" `418 
v L "rCount" 1 445 "*int8" `419 
f B "i2c_transfer" 1 445 "void(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `413 
f N "i2c_transfer_out" 1 446 ""
v L "address" 1 446 "int8" `421 
v L "wData" 1 446 "*int8" `422 
v L "wCount" 1 446 "int8" `423 
f B "i2c_transfer_out" 1 446 "void(int8 address,*int8 wData,int8 wCount)" `420 
f N "i2c_transfer_out" 1 447 ""
v L "stream" 1 447 "int8" `425 
v L "address" 1 447 "int8" `426 
v L "wData" 1 447 "*int8" `427 
v L "wCount" 1 447 "int8" `428 
f B "i2c_transfer_out" 1 447 "void(int8 stream,int8 address,*int8 wData,int8 wCount)" `424 
f N "i2c_transfer_in" 1 448 ""
v L "address" 1 448 "int8" `430 
v L "rData" 1 448 "*int8" `431 
v L "rCount" 1 448 "int8" `432 
f B "i2c_transfer_in" 1 448 "void(int8 address,*int8 rData,int8 rCount)" `429 
f N "i2c_transfer_in" 1 449 ""
v L "stream" 1 449 "int8" `434 
v L "address" 1 449 "int8" `435 
v L "rData" 1 449 "*int8" `436 
v L "rCount" 1 449 "int8" `437 
f B "i2c_transfer_in" 1 449 "void(int8 stream,int8 address,*int8 rData,int8 rCount)" `433  "#use spi() Prototypes:"
f N "spi_xfer" 1 452 ""
f B "spi_xfer" 1 452 "int8()" `438 
f N "spi_xfer" 1 453 ""
f G "spi_xfer" 1 453 "int16()" `439 
f N "spi_xfer" 1 454 ""
f G "spi_xfer" 1 454 "int32()" `439 
f N "spi_xfer" 1 455 ""
v L "data" 1 455 "int8" `440 
f B "spi_xfer" 1 455 "int8(int8 data)" `439 
f N "spi_xfer" 1 456 ""
v L "data" 1 456 "int16" `442 
f B "spi_xfer" 1 456 "int16(int16 data)" `441 
f N "spi_xfer" 1 457 ""
v L "data" 1 457 "int32" `444 
f B "spi_xfer" 1 457 "int32(int32 data)" `443 
f N "spi_xfer" 1 458 ""
v L "stream" 1 458 "int8" `446 
v L "data" 1 458 "int8" `447 
f B "spi_xfer" 1 458 "int8(int8 stream,int8 data)" `445 
f N "spi_xfer" 1 459 ""
v L "stream" 1 459 "int8" `449 
v L "data" 1 459 "int16" `450 
f B "spi_xfer" 1 459 "int16(int8 stream,int16 data)" `448 
f N "spi_xfer" 1 460 ""
v L "stream" 1 460 "int8" `452 
v L "data" 1 460 "int32" `453 
f B "spi_xfer" 1 460 "int32(int8 stream,int32 data)" `451 
f N "spi_xfer" 1 461 ""
v L "stream" 1 461 "int8" `455 
v L "data" 1 461 "int8" `456 
v L "bits" 1 461 "int8" `457 
f B "spi_xfer" 1 461 "int8(int8 stream,int8 data,int8 bits)" `454 
f N "spi_xfer" 1 462 ""
v L "stream" 1 462 "int8" `459 
v L "data" 1 462 "int16" `460 
v L "bits" 1 462 "int8" `461 
f B "spi_xfer" 1 462 "int16(int8 stream,int16 data,int8 bits)" `458 
f N "spi_xfer" 1 463 ""
v L "stream" 1 463 "int8" `463 
v L "data" 1 463 "int32" `464 
v L "bits" 1 463 "int8" `465 
f B "spi_xfer" 1 463 "int32(int8 stream,int32 data,int8 bits)" `462 
f N "spi_init" 1 464 ""
v L "baud" 1 464 "int32" `467 
f B "spi_init" 1 464 "void(int32 baud)" `466 
f N "spi_init" 1 465 ""
v L "stream" 1 465 "int8" `469 
v L "baud" 1 465 "int32" `470 
f B "spi_init" 1 465 "void(int8 stream,int32 baud)" `468 
f N "spi_speed" 1 466 ""
v L "baud" 1 466 "int32" `472 
f B "spi_speed" 1 466 "void(int32 baud)" `471 
f N "spi_speed" 1 467 ""
v L "stream" 1 467 "int8" `474 
v L "baud" 1 467 "int32" `475 
f B "spi_speed" 1 467 "void(int8 stream,int32 baud)" `473 
f N "spi_speed" 1 468 ""
v L "stream" 1 468 "int8" `477 
v L "baud" 1 468 "int32" `478 
v L "clock" 1 468 "int32" `479 
f B "spi_speed" 1 468 "void(int8 stream,int32 baud,int32 clock)" `476 
f N "spi_prewrite" 1 469 ""
v L "data" 1 469 "int8" `481 
f B "spi_prewrite" 1 469 "void(int8 data)" `480 
f N "spi_prewrite" 1 470 ""
v L "data" 1 470 "int16" `483 
f B "spi_prewrite" 1 470 "void(int16 data)" `482 
f N "spi_prewrite" 1 471 ""
v L "data" 1 471 "int32" `485 
f B "spi_prewrite" 1 471 "void(int32 data)" `484 
f N "spi_prewrite" 1 472 ""
v L "??65535" 1 472 "int8" `487 
v L "data" 1 472 "int8" `488 
f B "spi_prewrite" 1 472 "void(int8 ,int8 data)" `486 
f N "spi_prewrite" 1 473 ""
v L "??65535" 1 473 "int8" `490 
v L "data" 1 473 "int16" `491 
f B "spi_prewrite" 1 473 "void(int8 ,int16 data)" `489 
f N "spi_prewrite" 1 474 ""
v L "??65535" 1 474 "int8" `493 
v L "data" 1 474 "int32" `494 
f B "spi_prewrite" 1 474 "void(int8 ,int32 data)" `492 
f N "spi_xfer_in" 1 475 ""
f B "spi_xfer_in" 1 475 "int8()" `495 
f N "spi_xfer_in" 1 476 ""
f G "spi_xfer_in" 1 476 "int16()" `496 
f N "spi_xfer_in" 1 477 ""
f G "spi_xfer_in" 1 477 "int32()" `496 
f N "spi_xfer_in" 1 478 ""
v L "bits" 1 478 "int8" `497 
f B "spi_xfer_in" 1 478 "int8(int8 bits)" `496 
f N "spi_xfer_in" 1 479 ""
v L "bits" 1 479 "int8" `499 
f G "spi_xfer_in" 1 479 "int16(int8 bits)" `498 
f N "spi_xfer_in" 1 480 ""
v L "bits" 1 480 "int8" `499 
f G "spi_xfer_in" 1 480 "int32(int8 bits)" `498 
f N "spi_xfer_in" 1 481 ""
v L "stream" 1 481 "int8" `499 
v L "bits" 1 481 "int8" `500 
f B "spi_xfer_in" 1 481 "int8(int8 stream,int8 bits)" `498 
f N "spi_xfer_in" 1 482 ""
v L "stream" 1 482 "int8" `499 
v L "bits" 1 482 "int8" `503 
f G "spi_xfer_in" 1 482 "int16(int8 stream,int8 bits)" `501 
f N "spi_xfer_in" 1 483 ""
v L "stream" 1 483 "int8" `499 
v L "bits" 1 483 "int8" `503 
f G "spi_xfer_in" 1 483 "int32(int8 stream,int8 bits)" `501  "#use rtos() Prototypes:"
f N "rtos_run" 1 486 ""
f B "rtos_run" 1 486 "void(int8 stream,int8 bits)" `501 
f N "rtos_yield" 1 487 ""
f B "rtos_yield" 1 487 "void(int8 bits)" `502 
f N "rtos_enable" 1 488 ""
v L "task" 1 488 "int8" `504 
f B "rtos_enable" 1 488 "void(int8 task)" `503 
f N "rtos_disable" 1 489 ""
v L "task" 1 489 "int8" `506 
f B "rtos_disable" 1 489 "void(int8 task)" `505 
f N "rtos_terminate" 1 490 ""
f B "rtos_terminate" 1 490 "void()" `507 
f N "rtos_await" 1 491 ""
v L "flag" 1 491 "int8" `509 
f B "rtos_await" 1 491 "void(int8 flag)" `508 
f N "rtos_wait" 1 492 ""
v L "sem" 1 492 "int8" `511 
f B "rtos_wait" 1 492 "void(int8 sem)" `510 
f N "rtos_signal" 1 493 ""
v L "sem" 1 493 "int8" `513 
f B "rtos_signal" 1 493 "void(int8 sem)" `512 
f N "rtos_msg_send" 1 494 ""
v L "task" 1 494 "int8" `515 
v L "msg" 1 494 "int8" `516 
f B "rtos_msg_send" 1 494 "void(int8 task,int8 msg)" `514 
f N "rtos_msg_read" 1 495 ""
f B "rtos_msg_read" 1 495 "int8()" `517 
f N "rtos_msg_poll" 1 496 ""
f B "rtos_msg_poll" 1 496 "int8()" `518 
f N "rtos_overrun" 1 497 ""
v L "task" 1 497 "int8" `520 
f B "rtos_overrun" 1 497 "int8(int8 task)" `519 
f N "rtos_stats" 1 498 ""
v L "task" 1 498 "int8" `522 
v L "stat" 1 498 "*int8" `523 
f B "rtos_stats" 1 498 "void(int8 task,*int8 stat)" `521  "#use timer() Prototypes:"
f N "get_ticks" 1 501 ""
f B "get_ticks" 1 501 "int8()" `524 
f N "get_ticks" 1 502 ""
f G "get_ticks" 1 502 "int16()" `525 
f N "get_ticks" 1 503 ""
f G "get_ticks" 1 503 "int32()" `525 
f N "get_ticks" 1 504 ""
v L "stream" 1 504 "int8" `526 
f B "get_ticks" 1 504 "int8(int8 stream)" `525 
f N "get_ticks" 1 505 ""
v L "stream" 1 505 "int8" `528 
f G "get_ticks" 1 505 "int16(int8 stream)" `527 
f N "get_ticks" 1 506 ""
v L "stream" 1 506 "int8" `528 
f G "get_ticks" 1 506 "int32(int8 stream)" `527 
f N "set_ticks" 1 507 ""
v L "value" 1 507 "int8" `528 
f B "set_ticks" 1 507 "void(int8 value)" `527 
f N "set_ticks" 1 508 ""
v L "value" 1 508 "int16" `530 
f B "set_ticks" 1 508 "void(int16 value)" `529 
f N "set_ticks" 1 509 ""
v L "value" 1 509 "int32" `532 
f B "set_ticks" 1 509 "void(int32 value)" `531 
f N "set_ticks" 1 510 ""
v L "stream" 1 510 "int8" `534 
v L "value" 1 510 "int8" `535 
f B "set_ticks" 1 510 "void(int8 stream,int8 value)" `533 
f N "set_ticks" 1 511 ""
v L "stream" 1 511 "int8" `537 
v L "value" 1 511 "int16" `538 
f B "set_ticks" 1 511 "void(int8 stream,int16 value)" `536 
f N "set_ticks" 1 512 ""
v L "stream" 1 512 "int8" `540 
v L "value" 1 512 "int32" `541 
f B "set_ticks" 1 512 "void(int8 stream,int32 value)" `539  "#use pwm() Prototypes:"
f N "pwm_on" 1 515 ""
f B "pwm_on" 1 515 "void()" `542 
f N "pwm_on" 1 516 ""
v L "stream" 1 516 "int8" `544 
f B "pwm_on" 1 516 "void(int8 stream)" `543 
f N "pwm_off" 1 517 ""
f B "pwm_off" 1 517 "void()" `545 
f N "pwm_off" 1 518 ""
v L "stream" 1 518 "int8" `547 
f B "pwm_off" 1 518 "void(int8 stream)" `546 
f N "pwm_set_duty" 1 519 ""
v L "duty" 1 519 "int16" `549 
f B "pwm_set_duty" 1 519 "void(int16 duty)" `548 
f N "pwm_set_duty" 1 520 ""
v L "stream" 1 520 "int8" `551 
v L "duty" 1 520 "int16" `552 
f B "pwm_set_duty" 1 520 "void(int8 stream,int16 duty)" `550 
f N "pwm_set_duty_percent" 1 521 ""
v L "percent" 1 521 "int16" `554 
f B "pwm_set_duty_percent" 1 521 "void(int16 percent)" `553 
f N "pwm_set_duty_percent" 1 522 ""
v L "stream" 1 522 "int8" `556 
v L "percent" 1 522 "int16" `557 
f B "pwm_set_duty_percent" 1 522 "void(int8 stream,int16 percent)" `555 
f N "pwm_set_frequency" 1 523 ""
v L "frequency" 1 523 "int32" `559 
f B "pwm_set_frequency" 1 523 "void(int32 frequency)" `558 
f N "pwm_set_frequency" 1 524 ""
v L "stream" 1 524 "int8" `561 
v L "frequency" 1 524 "int32" `562 
f B "pwm_set_frequency" 1 524 "void(int8 stream,int32 frequency)" `560  "#use capture() Prototypes:"
f N "get_capture_time" 1 527 ""
f B "get_capture_time" 1 527 "int16()" `563 
f N "get_capture_time" 1 528 ""
v L "stream" 1 528 "int8" `565 
f B "get_capture_time" 1 528 "int16(int8 stream)" `564 
f N "get_capture_event" 1 529 ""
f B "get_capture_event" 1 529 "int8()" `566 
f N "get_capture_event" 1 530 ""
v L "stream" 1 530 "int8" `568 
f B "get_capture_event" 1 530 "int8(int8 stream)" `567  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
f N "goto_address" 1 543 ""
v L "address" 1 543 "int16" `570 
f B "goto_address" 1 543 "void(int16 address)" `569 
f N "label_address" 1 544 ""
v L "label" 1 544 "int16" `572 
f B "label_address" 1 544 "int16(int16 label)" `571  "Program Memory Read Prototypes:"
f N "read_program_memory" 1 547 ""
v L "address" 1 547 "int16" `574 
v L "dataptr" 1 547 "*int8" `575 
v L "count" 1 547 "int16" `576 
f B "read_program_memory" 1 547 "void(int16 address,*int8 dataptr,int16 count)" `573 
f N "read_program_eeprom" 1 548 ""
v L "address" 1 548 "int16" `578 
f B "read_program_eeprom" 1 548 "int16(int16 address)" `577  "Program Memory Write Prototypes:"
f N "write_program_memory" 1 551 ""
v L "address" 1 551 "int16" `580 
v L "dataptr" 1 551 "*int8" `581 
v L "count" 1 551 "int16" `582 
f B "write_program_memory" 1 551 "void(int16 address,*int8 dataptr,int16 count)" `579 
f N "write_program_eeprom" 1 552 ""
v L "address" 1 552 "int16" `584 
v L "data" 1 552 "int16" `585 
f B "write_program_eeprom" 1 552 "void(int16 address,int16 data)" `583  "EEPROM Prototypes:"
d G "__EEADDRESS__" 1 559 "unsigned int8"
f N "read_eeprom" 1 562 ""
v L "address" 1 562 "int8" `587 
f B "read_eeprom" 1 562 "int8(int8 address)" `586 
f N "write_eeprom" 1 563 ""
v L "address" 1 563 "int8" `589 
v L "value" 1 563 "int8" `590 
f B "write_eeprom" 1 563 "void(int8 address,int8 value)" `588  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
f N "enable_interrupts" 1 570 ""
v L "interrupt" 1 570 "int32" `592 
f B "enable_interrupts" 1 570 "void(int32 interrupt)" `591 
f N "disable_interrupts" 1 571 ""
v L "interrupt" 1 571 "int32" `594 
f B "disable_interrupts" 1 571 "void(int32 interrupt)" `593 
f N "clear_interrupt" 1 572 ""
v L "interrupt" 1 572 "int32" `596 
f B "clear_interrupt" 1 572 "void(int32 interrupt)" `595 
f N "interrupt_active" 1 573 ""
v L "interrupt" 1 573 "int32" `598 
f B "interrupt_active" 1 573 "int8(int32 interrupt)" `597 
f N "interrupt_enabled" 1 574 ""
v L "interrupt" 1 574 "int32" `600 
f B "interrupt_enabled" 1 574 "int8(int32 interrupt)" `599 
f N "ext_int_edge" 1 575 ""
v L "source" 1 575 "int8" `602 
v L "edge" 1 575 "int8" `603 
f B "ext_int_edge" 1 575 "void(int8 source,int8 edge)" `601 
f N "jump_to_isr" 1 576 ""
v L "address" 1 576 "int16" `605 
f B "jump_to_isr" 1 576 "void(int16 address)" `604  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 578 "0x40"
d G "H_TO_L" 1 579 "0"
d G "GLOBAL" 1 581 "0x0BC0"
d G "PERIPH" 1 582 "0x0B40"
d G "INT_RTCC" 1 583 "0x000B20"
d G "INT_RB" 1 584 "0x00FF0B08"
d G "INT_EXT_L2H" 1 585 "0x50000B10"
d G "INT_EXT_H2L" 1 586 "0x60000B10"
d G "INT_EXT" 1 587 "0x000B10"
d G "INT_AD" 1 588 "0x008C40"
d G "INT_TBE" 1 589 "0x008C10"
d G "INT_RDA" 1 590 "0x008C20"
d G "INT_TIMER1" 1 591 "0x008C01"
d G "INT_TIMER2" 1 592 "0x008C02"
d G "INT_CCP1" 1 593 "0x008C04"
d G "INT_CCP2" 1 594 "0x008D01"
d G "INT_SSP" 1 595 "0x008C08"
d G "INT_BUSCOL" 1 596 "0x008D08"
d G "INT_EEPROM" 1 597 "0x008D10"
d G "INT_TIMER0" 1 598 "0x000B20"
D G "__LCD_C__" 2 76 ""
C L "jump_to_isr" 2 2 2 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 1 "FUNCTION"
C L "jump_to_isr" 2 2 2 "FUNCTION"
T G "LCD_PIN_MAP" 2 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `616  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 2 109 "(x) lcdlat.enable=x"
D G "lcd_enable_tris" 2 110 "()   lcdtris.enable=0"
D G "lcd_output_rs" 2 117 "(x) lcdlat.rs=x"
D G "lcd_rs_tris" 2 118 "()   lcdtris.rs=0"
D G "lcd_output_rw" 2 125 "(x) lcdlat.rw=x"
D G "lcd_rw_tris" 2 126 "()   lcdtris.rw=0"
D G "LCD_DATA_PORT" 2 151 "getenv("SFR:PORTB")" "portb"
V G "lcd" 2 161 "LCD_PIN_MAP" `617 
V G "lcdlat" 2 161 "LCD_PIN_MAP" `618 
V G "lcdtris" 2 161 "LCD_PIN_MAP" `619 
D G "LCD_TYPE" 2 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 2 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 2 187 "20"
F N "lcd_read_nibble" 2 190 ""
f G "lcd_read_nibble" 2 190 "int8()" `620 
F N "lcd_read_byte" 2 192 ""
F G "lcd_read_byte" 2 193 "int8()" `621 
V L "low" 2 194 "int8" `622 
V L "high" 2 194 "int8" `623 
F N "lcd_read_nibble" 2 239 ""
F G "lcd_read_nibble" 2 240 "int8()" `620 
F N "lcd_send_nibble" 2 256 ""
V L "n" 2 256 "int8" `625 
F G "lcd_send_nibble" 2 257 "void(int8 n)" `624 
F N "lcd_send_byte" 2 274 ""
V L "address" 2 274 "int8" `627 
V L "n" 2 274 "int8" `628 
F G "lcd_send_byte" 2 275 "void(int8 address,int8 n)" `626 
F N "lcd_init" 2 299 ""
F G "lcd_init" 2 300 "void()" `629 
V L "i" 2 301 "int8" `630 
V L "LCD_INIT_STRING" 2 302 "int8[4]" `631 
C L "lcd_init" 2 2 2 "FUNCTION"
F N "lcd_gotoxy" 2 345 ""
V L "x" 2 345 "int8" `633 
V L "y" 2 345 "int8" `634 
F G "lcd_gotoxy" 2 346 "void(int8 x,int8 y)" `632 
V L "address" 2 347 "int8" `635 
F N "lcd_putc" 2 363 ""
V L "c" 2 363 "int8" `637 
F G "lcd_putc" 2 364 "void(int8 c)" `636 
F N "lcd_getc" 2 406 ""
V L "x" 2 406 "int8" `639 
V L "y" 2 406 "int8" `640 
F G "lcd_getc" 2 407 "int8(int8 x,int8 y)" `638 
V L "value" 2 408 "int8" `641 
C L "lcd_getc" 2 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 2 2 5 "FUNCTION"
F N "lcd_set_cgram_char" 2 424 ""
V L "which" 2 424 "int8" `643 
V L "ptr" 2 424 "*int8" `644 
F G "lcd_set_cgram_char" 2 425 "void(int8 which,*int8 ptr)" `642 
V L "i" 2 426 "int8" `645 
C L "lcd_set_cgram_char" 2 2 1 "FUNCTION"
F N "lcd_cursor_on" 2 443 ""
V L "on" 2 443 "int8" `647 
F G "lcd_cursor_on" 2 444 "void(int8 on)" `646 
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
C L "lcd_cursor_on" 2 2 1 "FUNCTION"
E G "LED_D1" 0 35 "0" `650 
E G "LED_D2" 0 35 "1" `651 
E G "LED_D3" 0 35 "2" `652 
V G "" 0 35 "" "LED_D1 = 0, LED_D2 = 1, LED_D3 = 2"
F N "nav" 0 37 ""
V L "m" 0 37 "int8" `654 
F G "nav" 0 38 "void(int8 m)" `653 
F N "MAIN" 0 73 ""
F G "MAIN" 0 74 "void()" `662 
V L "m" 0 77 "int8" `665 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
